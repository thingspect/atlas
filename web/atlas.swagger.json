{
  "swagger": "2.0",
  "info": {
    "title": "Atlas",
    "version": "1.0",
    "contact": {
      "name": "Thingspect",
      "url": "https://www.thingspect.com/",
      "email": "info@thingspect.com"
    }
  },
  "tags": [
    {
      "name": "AlertService"
    },
    {
      "name": "DataPointService"
    },
    {
      "name": "DeviceService"
    },
    {
      "name": "EventService"
    },
    {
      "name": "OrgService"
    },
    {
      "name": "RuleAlarmService"
    },
    {
      "name": "SessionService"
    },
    {
      "name": "TagService"
    },
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/alerts": {
      "get": {
        "summary": "List all alerts for a device, alarm, and/or user in a [end, start) time range, in descending timestamp order.",
        "operationId": "AlertService_ListAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uniqID",
            "description": "Device unique ID. If neither unique ID nor device ID are specified, all devices are included.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceID",
            "description": "Device ID (UUID). If neither unique ID nor device ID are specified, all devices are included.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "alarmID",
            "description": "Alarm ID (UUID). If not specified, all alarms are included.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userID",
            "description": "User ID (UUID). If not specified, all users are included.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "description": "Alerts range end time. Defaults to current time if not specified. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTime",
            "description": "Alerts range start time. Defaults to end_time - 24 hours if not specified or after end_time. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "AlertService"
        ]
      }
    },
    "/v1/datapoints": {
      "get": {
        "summary": "List all data points for a device in a [end, start) time range, in descending timestamp order.",
        "operationId": "DataPointService_ListDataPoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListDataPointsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uniqID",
            "description": "Device unique ID. Either unique ID or device ID must be provided.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceID",
            "description": "Device ID (UUID). Either unique ID or device ID must be provided.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attr",
            "description": "Device attribute. If not specified, all attributes are included.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "description": "Data points range end time. Defaults to current time if not specified. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTime",
            "description": "Data points range start time. Defaults to end_time - 24 hours if not specified or after end_time. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "DataPointService"
        ]
      },
      "post": {
        "summary": "Publish data points.",
        "operationId": "DataPointService_PublishDataPoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "202": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiPublishDataPointsRequest"
            }
          }
        ],
        "tags": [
          "DataPointService"
        ]
      }
    },
    "/v1/datapoints/latest": {
      "get": {
        "summary": "List the latest data point for each of a device's attributes.",
        "operationId": "DataPointService_LatestDataPoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLatestDataPointsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uniqID",
            "description": "Device unique ID. Either unique ID or device ID must be provided.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceID",
            "description": "Device ID (UUID). Either unique ID or device ID must be provided.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DataPointService"
        ]
      }
    },
    "/v1/devices": {
      "get": {
        "summary": "List all devices.",
        "operationId": "DeviceService_ListDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListDevicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of devices to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "description": "Device tag. If not specified, all tags are included.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "post": {
        "summary": "Create a device.",
        "operationId": "DeviceService_CreateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Device message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/v1/devices/{device.id}": {
      "put": {
        "summary": "Update a device.",
        "operationId": "DeviceService_UpdateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Device ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Device message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "patch": {
        "summary": "Update a device.",
        "operationId": "DeviceService_UpdateDevice2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Device ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Device message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/v1/devices/{id}": {
      "get": {
        "summary": "Get a device by ID.",
        "operationId": "DeviceService_GetDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonDevice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Device ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Delete a device by ID.",
        "operationId": "DeviceService_DeleteDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Device ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/v1/devices/{id}/lorawan": {
      "delete": {
        "summary": "Remove LoRaWAN configuration from a device.",
        "operationId": "DeviceService_DeleteDeviceLoRaWAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Device ID (UUID) to remove LoRaWAN configuration.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "post": {
        "summary": "Add LoRaWAN configuration to a device.",
        "operationId": "DeviceService_CreateDeviceLoRaWAN",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Device ID (UUID) to add LoRaWAN configuration.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateDeviceLoRaWANRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/v1/events": {
      "get": {
        "summary": "List all events for a device in a [end, start) time range, in descending timestamp order.",
        "operationId": "EventService_ListEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "uniqID",
            "description": "Device unique ID. Either unique ID or device ID must be provided.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceID",
            "description": "Device ID (UUID). Either unique ID or device ID must be provided.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ruleID",
            "description": "Rule ID (UUID). If not specified, all rules are included.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "description": "Events range end time. Defaults to current time if not specified. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "startTime",
            "description": "Events range start time. Defaults to end_time - 24 hours if not specified or after end_time. Maximum supported time range is 90 days.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/v1/events/latest": {
      "get": {
        "summary": "List the latest event for each of an organization's devices.",
        "operationId": "EventService_LatestEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLatestEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleID",
            "description": "Rule ID (UUID). If not specified, all rules are included.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    },
    "/v1/organizations": {
      "get": {
        "summary": "List all orgs.",
        "operationId": "OrgService_ListOrgs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListOrgsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of organizations to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      },
      "post": {
        "summary": "Create an organization.",
        "operationId": "OrgService_CreateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Org message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          }
        ],
        "tags": [
          "OrgService"
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "summary": "Get an organization by ID.",
        "operationId": "OrgService_GetOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Organization ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      },
      "delete": {
        "summary": "Delete an organization by ID.",
        "operationId": "OrgService_DeleteOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Organization ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      }
    },
    "/v1/organizations/{org.id}": {
      "put": {
        "summary": "Update an organization.",
        "operationId": "OrgService_UpdateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "org.id",
            "description": "Organization ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Org message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      },
      "patch": {
        "summary": "Update an organization.",
        "operationId": "OrgService_UpdateOrg2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "org.id",
            "description": "Organization ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Org message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOrg"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OrgService"
        ]
      }
    },
    "/v1/rules": {
      "get": {
        "summary": "List all rules. Rules define how events are generated.",
        "operationId": "RuleAlarmService_ListRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of rules to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      },
      "post": {
        "summary": "Create a rule. Rules define how events are generated.",
        "operationId": "RuleAlarmService_CreateRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Rule message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/alarms": {
      "get": {
        "summary": "List alarms. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_ListAlarms2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAlarmsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of alarms to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ruleID",
            "description": "Rule ID (UUID). If not specified, all rules are included.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/alarms/test": {
      "post": {
        "summary": "Test an alarm. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_TestAlarm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTestAlarmResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTestAlarmRequest"
            }
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/test": {
      "post": {
        "summary": "Test a rule. Rules define how events are generated.",
        "operationId": "RuleAlarmService_TestRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTestRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTestRuleRequest"
            }
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/{alarm.ruleID}/alarms": {
      "post": {
        "summary": "Create an alarm. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_CreateAlarm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "alarm.ruleID",
            "description": "Rule ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Alarm message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/{alarm.ruleID}/alarms/{alarm.id}": {
      "put": {
        "summary": "Update an alarm. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_UpdateAlarm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "alarm.ruleID",
            "description": "Rule ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "alarm.id",
            "description": "Alarm ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Alarm message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      },
      "patch": {
        "summary": "Update an alarm. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_UpdateAlarm2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "alarm.ruleID",
            "description": "Rule ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "alarm.id",
            "description": "Alarm ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Alarm message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/{id}": {
      "get": {
        "summary": "Get a rule by ID. Rules define how events are generated.",
        "operationId": "RuleAlarmService_GetRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Rule ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      },
      "delete": {
        "summary": "Delete a rule by ID. Rules define how events are generated.",
        "operationId": "RuleAlarmService_DeleteRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Rule ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/{rule.id}": {
      "put": {
        "summary": "Update a rule. Rules define how events are generated.",
        "operationId": "RuleAlarmService_UpdateRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "rule.id",
            "description": "Rule ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Rule message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      },
      "patch": {
        "summary": "Update a rule. Rules define how events are generated.",
        "operationId": "RuleAlarmService_UpdateRule2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "rule.id",
            "description": "Rule ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Rule message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/commonRule"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/{ruleID}/alarms": {
      "get": {
        "summary": "List alarms. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_ListAlarms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAlarmsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleID",
            "description": "Rule ID (UUID). If not specified, all rules are included.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Number of alarms to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/rules/{ruleID}/alarms/{id}": {
      "get": {
        "summary": "Get an alarm by ID. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_GetAlarm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAlarm"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleID",
            "description": "Rule ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Alarm ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      },
      "delete": {
        "summary": "Delete an alarm by ID. Alarms define how alerts are generated.",
        "operationId": "RuleAlarmService_DeleteAlarm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleID",
            "description": "Rule ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Alarm ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RuleAlarmService"
        ]
      }
    },
    "/v1/sessions/login": {
      "post": {
        "summary": "Log in a user.",
        "operationId": "SessionService_Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLoginRequest"
            }
          }
        ],
        "tags": [
          "SessionService"
        ],
        "security": []
      }
    },
    "/v1/tags": {
      "get": {
        "summary": "List all tags.",
        "operationId": "TagService_ListTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListTagsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "TagService"
        ]
      }
    },
    "/v1/users": {
      "get": {
        "summary": "List all users.",
        "operationId": "UserService_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Number of users to retrieve in a single page. Defaults to 50 if not specified, with a maximum of 250.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Token of the page to retrieve. If not specified, the first page of results will be returned. To request the next page of results, use next_page_token from the previous response.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag",
            "description": "User tag. If not specified, all tags are included.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "Create a user.",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "201": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "User message to create.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Get a user by ID.",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User ID (UUID) to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "Delete a user by ID.",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "204": {
            "description": "A successful response.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User ID (UUID) to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{id}/password": {
      "put": {
        "summary": "Update a user's password.",
        "operationId": "UserService_UpdateUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User ID (UUID) to update password.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateUserPasswordRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/users/{user.id}": {
      "put": {
        "summary": "Update a user.",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "User ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "User message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "patch": {
        "summary": "Update a user.",
        "operationId": "UserService_UpdateUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "User ID (UUID).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "User message to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          {
            "name": "updateMask",
            "description": "Fields to update. Automatically populated by a PATCH request. If not present, a full resource update is performed.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "CreateDeviceLoRaWANRequestDeviceLoRaWANType": {
      "type": "object",
      "properties": {
        "appKey": {
          "type": "string",
          "description": "Device LoRaWAN 1.0.x application key.",
          "required": [
            "app_key"
          ]
        }
      },
      "description": "DeviceLoRaWANType is sent to add LoRaWAN device configuration.",
      "required": [
        "appKey"
      ]
    },
    "CreateDeviceLoRaWANRequestGatewayLoRaWANType": {
      "type": "object",
      "description": "GatewayLoRaWANType is sent to add LoRaWAN gateway configuration."
    },
    "apiAlarm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Alarm ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "ruleID": {
          "type": "string",
          "description": "Rule ID (UUID).",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Alarm name."
        },
        "status": {
          "$ref": "#/definitions/thingspectcommonStatus",
          "description": "Alarm status."
        },
        "type": {
          "$ref": "#/definitions/apiAlarmType",
          "description": "Alarm type."
        },
        "userTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "User tags to whom alerts are sent."
        },
        "subjectTemplate": {
          "type": "string",
          "description": "Alarm subject template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/)."
        },
        "bodyTemplate": {
          "type": "string",
          "description": "Alarm body template. Templates generate HTML-safe output using the [Go template engine](https://golang.org/pkg/html/template/)."
        },
        "repeatInterval": {
          "type": "integer",
          "format": "int32",
          "description": "Alarm repeat interval, in minutes. Duration after which a duplicate event will cause an alert to be sent. Minimum is 1 minute, maximum is 14 days."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Alarm creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Alarm modification timestamp.",
          "readOnly": true
        }
      },
      "description": "Alarm represents an alarm as stored in the database."
    },
    "apiAlarmType": {
      "type": "string",
      "enum": [
        "ALARM_TYPE_UNSPECIFIED",
        "APP",
        "SMS"
      ],
      "default": "ALARM_TYPE_UNSPECIFIED",
      "description": "AlarmType represents the type of alarm.\n\n - ALARM_TYPE_UNSPECIFIED: Alarm type is not specified.\n - APP: Push notification via mobile application.\n - SMS: SMS notification."
    },
    "apiAlert": {
      "type": "object",
      "properties": {
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID)."
        },
        "uniqID": {
          "type": "string",
          "description": "Device unique ID."
        },
        "alarmID": {
          "type": "string",
          "description": "Alarm ID (UUID)."
        },
        "userID": {
          "type": "string",
          "description": "User ID (UUID)."
        },
        "status": {
          "$ref": "#/definitions/apiAlertStatus",
          "description": "Alert status."
        },
        "error": {
          "type": "string",
          "description": "Error message. This field will be empty if no error was encountered."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Alert creation timestamp."
        },
        "traceId": {
          "type": "string",
          "description": "Trace ID (UUID)."
        }
      },
      "description": "Alert represents an alert as stored in the database."
    },
    "apiAlertStatus": {
      "type": "string",
      "enum": [
        "ALERT_STATUS_UNSPECIFIED",
        "SENT",
        "ERROR"
      ],
      "default": "ALERT_STATUS_UNSPECIFIED",
      "description": "AlertStatus represents the status of an alert.\n\n - ALERT_STATUS_UNSPECIFIED: Alert status is not specified.\n - SENT: Alert was successfully sent.\n - ERROR: Alert encountered an error."
    },
    "apiCreateDeviceLoRaWANRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Device ID (UUID) to add LoRaWAN configuration.",
          "readOnly": true
        },
        "gatewayLoRaWANType": {
          "$ref": "#/definitions/CreateDeviceLoRaWANRequestGatewayLoRaWANType",
          "description": "Gateway LoRaWAN configuration type."
        },
        "deviceLoRaWANType": {
          "$ref": "#/definitions/CreateDeviceLoRaWANRequestDeviceLoRaWANType",
          "description": "Device LoRaWAN configuration type."
        }
      },
      "description": "CreateDeviceLoRaWANRequest is sent to add LoRaWAN configuration to a device."
    },
    "apiEvent": {
      "type": "object",
      "properties": {
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID)."
        },
        "uniqID": {
          "type": "string",
          "description": "Device unique ID."
        },
        "ruleID": {
          "type": "string",
          "description": "Rule ID (UUID)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Event creation timestamp."
        },
        "traceId": {
          "type": "string",
          "description": "Trace ID (UUID)."
        }
      },
      "description": "Event represents an event as stored in the database."
    },
    "apiLatestDataPointsResponse": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonDataPoint"
          },
          "description": "Data point array, ordered by ascending attribute name."
        }
      },
      "description": "LatestDataPointsResponse is sent in response to a device latest list."
    },
    "apiLatestEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEvent"
          },
          "description": "Event array, ordered by descending created_at timestamp."
        }
      },
      "description": "LatestEventsResponse is sent in response to an organization latest list."
    },
    "apiListAlarmsResponse": {
      "type": "object",
      "properties": {
        "alarms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAlarm"
          },
          "description": "Alarm array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of alarms available."
        }
      },
      "description": "ListAlarmsResponse is sent in response to an alarm list."
    },
    "apiListAlertsResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiAlert"
          },
          "description": "Alert array, ordered by descending created_at timestamp."
        }
      },
      "description": "ListAlertsResponse is sent in response to a device alerts list."
    },
    "apiListDataPointsResponse": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonDataPoint"
          },
          "description": "Data point array, ordered by descending created_at timestamp."
        }
      },
      "description": "ListDataPointsResponse is sent in response to a device data points list."
    },
    "apiListDevicesResponse": {
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonDevice"
          },
          "description": "Device array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of devices available."
        }
      },
      "description": "ListDevicesResponse is sent in response to a device list."
    },
    "apiListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiEvent"
          },
          "description": "Event array, ordered by descending created_at timestamp."
        }
      },
      "description": "ListEventsResponse is sent in response to a device events list."
    },
    "apiListOrgsResponse": {
      "type": "object",
      "properties": {
        "orgs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiOrg"
          },
          "description": "Org array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of orgs available."
        }
      },
      "description": "ListOrgsResponse is sent in response to an organization list."
    },
    "apiListRulesResponse": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonRule"
          },
          "description": "Rule array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of rules available."
        }
      },
      "description": "ListRulesResponse is sent in response to a rule list."
    },
    "apiListTagsResponse": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tag array, ordered by ascending name."
        }
      },
      "description": "ListTagsResponse is sent in response to a tag list."
    },
    "apiListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUser"
          },
          "description": "User array, ordered by ascending created_at timestamp."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token used to retrieve the next page of results. Not returned for the last page."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of users available."
        }
      },
      "description": "ListUsersResponse is sent in response to a user list."
    },
    "apiLoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "Email of the user to log in.",
          "required": [
            "email"
          ]
        },
        "orgName": {
          "type": "string",
          "description": "Organization name of the user to log in.",
          "required": [
            "org_name"
          ]
        },
        "password": {
          "type": "string",
          "description": "Password of the user to log in.",
          "required": [
            "password"
          ]
        }
      },
      "description": "LoginRequest is sent to log in a user.",
      "required": [
        "email",
        "orgName",
        "password"
      ]
    },
    "apiLoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token to be used for subsequent non-login service calls."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "Token expiration timestamp."
        }
      },
      "description": "LoginResponse is sent in response to a user login."
    },
    "apiOrg": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Organization name."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Organization creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Organization modification timestamp.",
          "readOnly": true
        }
      },
      "description": "Org represents an organization as stored in the database."
    },
    "apiPublishDataPointsRequest": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonDataPoint"
          },
          "description": "Data point array to publish.",
          "required": [
            "points"
          ]
        }
      },
      "description": "PublishDataPointsRequest is sent to publish data points.",
      "required": [
        "points"
      ]
    },
    "apiTestAlarmRequest": {
      "type": "object",
      "properties": {
        "point": {
          "$ref": "#/definitions/commonDataPoint",
          "description": "Data point to test against an alarm."
        },
        "rule": {
          "$ref": "#/definitions/commonRule",
          "description": "Rule to test against an alarm."
        },
        "device": {
          "$ref": "#/definitions/commonDevice",
          "description": "Device to test against an alarm."
        },
        "alarm": {
          "$ref": "#/definitions/apiAlarm",
          "description": "Alarm message to test."
        }
      },
      "description": "TestAlarmRequest is sent to test an alarm."
    },
    "apiTestAlarmResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "description": "Result of the alarm generation. Subjects and bodies will be concatenated with ' - '."
        }
      },
      "description": "TestAlarmResponse is sent in response to an alarm test."
    },
    "apiTestRuleRequest": {
      "type": "object",
      "properties": {
        "point": {
          "$ref": "#/definitions/commonDataPoint",
          "description": "Data point to test against a rule."
        },
        "rule": {
          "$ref": "#/definitions/commonRule",
          "description": "Rule message to test."
        }
      },
      "description": "TestRuleRequest is sent to test a rule."
    },
    "apiTestRuleResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "boolean",
          "description": "Result of the rule evaluation."
        }
      },
      "description": "TestRuleResponse is sent in response to a rule test."
    },
    "apiUpdateUserPasswordRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID (UUID) to update password.",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "description": "User password to update.",
          "required": [
            "password"
          ]
        }
      },
      "description": "UpdateUserPasswordRequest is sent to update a user's password.",
      "required": [
        "password"
      ]
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "description": "User email."
        },
        "phone": {
          "type": "string",
          "description": "User phone number. If specified, must be in valid [E.164](https://www.twilio.com/docs/glossary/what-e164) format."
        },
        "role": {
          "$ref": "#/definitions/commonRole",
          "description": "User role."
        },
        "status": {
          "$ref": "#/definitions/thingspectcommonStatus",
          "description": "User status."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "User tags. Nested tags should be delimited by '/'."
        },
        "appKey": {
          "type": "string",
          "description": "Mobile application user key."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "User creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "User modification timestamp.",
          "readOnly": true
        }
      },
      "description": "User represents a user as stored in the database."
    },
    "commonDataPoint": {
      "type": "object",
      "properties": {
        "uniqID": {
          "type": "string",
          "description": "Device unique ID. Ignored during MQTT ingest if provided as part of the topic. Required for API publish.",
          "required": [
            "uniq_id"
          ]
        },
        "attr": {
          "type": "string",
          "description": "Device attribute.",
          "required": [
            "attr"
          ]
        },
        "intVal": {
          "type": "integer",
          "format": "int32",
          "description": "Integer value, 32-bit."
        },
        "fl64Val": {
          "type": "number",
          "format": "double",
          "description": "Float value, 64-bit."
        },
        "strVal": {
          "type": "string",
          "description": "String value."
        },
        "boolVal": {
          "type": "boolean",
          "description": "Boolean value."
        },
        "bytesVal": {
          "type": "string",
          "format": "byte",
          "description": "Bytes value. When used in JSON, the value will be represented as a base64 string."
        },
        "ts": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp. If not present during MQTT ingest or API publish, the current time will be used."
        },
        "token": {
          "type": "string",
          "description": "Authentication token (UUID). Only used during MQTT ingest. Will be ignored if provided as part of the Payload message.",
          "readOnly": true
        },
        "traceId": {
          "type": "string",
          "description": "Trace ID (UUID). Assigned by the platform, will be ignored if provided during MQTT ingest or API publish.",
          "readOnly": true
        }
      },
      "description": "DataPoint represents a data point as stored in the database.",
      "required": [
        "uniqID",
        "attr"
      ]
    },
    "commonDecoder": {
      "type": "string",
      "enum": [
        "RAW",
        "GATEWAY",
        "RADIO_BRIDGE_DOOR_V1",
        "RADIO_BRIDGE_DOOR_V2"
      ],
      "default": "RAW",
      "description": "Decoder represents the data payload decoder for a device.\n\n - RAW: Payloads will be passed through without decoding. Appropriate for devices that do not use decoders (MQTT, API, etc.).\n - GATEWAY: LoRaWAN gateway. Acts as a pass-through in the absence of device data payloads.\n - RADIO_BRIDGE_DOOR_V1: Radio Bridge Door/Window sensor with V1 firmware.\n - RADIO_BRIDGE_DOOR_V2: Radio Bridge Door/Window sensor with V2 firmware."
    },
    "commonDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Device ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "uniqID": {
          "type": "string",
          "description": "Device unique ID."
        },
        "name": {
          "type": "string",
          "description": "Device name."
        },
        "status": {
          "$ref": "#/definitions/thingspectcommonStatus",
          "description": "Device status."
        },
        "token": {
          "type": "string",
          "description": "Authentication token (UUID). Will be generated at creation time, but can be updated afterward."
        },
        "decoder": {
          "$ref": "#/definitions/commonDecoder",
          "description": "Device data payload decoder."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Device tags. Nested tags should be delimited by '/'."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Device creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Device modification timestamp.",
          "readOnly": true
        }
      },
      "description": "Device represents a device as stored in the database."
    },
    "commonRole": {
      "type": "string",
      "enum": [
        "ROLE_UNSPECIFIED",
        "CONTACT",
        "VIEWER",
        "BUILDER",
        "ADMIN",
        "SYS_ADMIN"
      ],
      "default": "ROLE_UNSPECIFIED",
      "description": "Role represents the role of a user.\n\n - ROLE_UNSPECIFIED: Role is not specified.\n - CONTACT: Contacts are not allowed to log in to the system, but can receive and respond to alerts from their organization.\n - VIEWER: Viewers can only read resources in their organization, but can update their own user.\n - BUILDER: Builders can read and modify resources in their organization, but can only update their own user.\n - ADMIN: Admins can read and modify anything in their organization, including creating users of an equal or lesser role.\n - SYS_ADMIN: System admins can create organizations and modify anything in their organization."
    },
    "commonRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Rule ID (UUID).",
          "readOnly": true
        },
        "orgID": {
          "type": "string",
          "description": "Organization ID (UUID).",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Rule name."
        },
        "status": {
          "$ref": "#/definitions/thingspectcommonStatus",
          "description": "Rule status."
        },
        "deviceTag": {
          "type": "string",
          "description": "Device tag to which the rule applies."
        },
        "attr": {
          "type": "string",
          "description": "Device and data point attribute to which the rule applies."
        },
        "expr": {
          "type": "string",
          "description": "Rule expression. The rules engine evaluates a boolean expression using the [Expr language](https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Rule creation timestamp.",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Rule modification timestamp.",
          "readOnly": true
        }
      },
      "description": "Rule represents a rule as stored in the database."
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "thingspectcommonStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "ACTIVE",
        "DISABLED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "Status represents the status of a message.\n\n - STATUS_UNSPECIFIED: Status is not specified.\n - ACTIVE: Message subject is active.\n - DISABLED: Message subject is disabled."
    }
  },
  "securityDefinitions": {
    "TokenAuth": {
      "type": "apiKey",
      "description": "Enter your token (/v1/sessions/login) in the format **Bearer \u0026lt;token\u0026gt;**",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "TokenAuth": []
    }
  ]
}
