// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTagger is a mock of Tagger interface.
type MockTagger struct {
	ctrl     *gomock.Controller
	recorder *MockTaggerMockRecorder
}

// MockTaggerMockRecorder is the mock recorder for MockTagger.
type MockTaggerMockRecorder struct {
	mock *MockTagger
}

// NewMockTagger creates a new mock instance.
func NewMockTagger(ctrl *gomock.Controller) *MockTagger {
	mock := &MockTagger{ctrl: ctrl}
	mock.recorder = &MockTaggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagger) EXPECT() *MockTaggerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockTagger) List(ctx context.Context, orgID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, orgID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTaggerMockRecorder) List(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTagger)(nil).List), ctx, orgID)
}
