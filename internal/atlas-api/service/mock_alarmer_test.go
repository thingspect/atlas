// Code generated by MockGen. DO NOT EDIT.
// Source: alarm.go
//
// Generated by this command:
//
//	mockgen -source alarm.go -destination mock_alarmer_test.go -package service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	api "github.com/thingspect/proto/go/api"
	gomock "go.uber.org/mock/gomock"
)

// MockAlarmer is a mock of Alarmer interface.
type MockAlarmer struct {
	ctrl     *gomock.Controller
	recorder *MockAlarmerMockRecorder
	isgomock struct{}
}

// MockAlarmerMockRecorder is the mock recorder for MockAlarmer.
type MockAlarmerMockRecorder struct {
	mock *MockAlarmer
}

// NewMockAlarmer creates a new mock instance.
func NewMockAlarmer(ctrl *gomock.Controller) *MockAlarmer {
	mock := &MockAlarmer{ctrl: ctrl}
	mock.recorder = &MockAlarmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlarmer) EXPECT() *MockAlarmerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAlarmer) Create(ctx context.Context, alarm *api.Alarm) (*api.Alarm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, alarm)
	ret0, _ := ret[0].(*api.Alarm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAlarmerMockRecorder) Create(ctx, alarm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAlarmer)(nil).Create), ctx, alarm)
}

// Delete mocks base method.
func (m *MockAlarmer) Delete(ctx context.Context, alarmID, orgID, ruleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, alarmID, orgID, ruleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAlarmerMockRecorder) Delete(ctx, alarmID, orgID, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAlarmer)(nil).Delete), ctx, alarmID, orgID, ruleID)
}

// List mocks base method.
func (m *MockAlarmer) List(ctx context.Context, orgID string, lBoundTS time.Time, prevID string, limit int32, ruleID string) ([]*api.Alarm, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, orgID, lBoundTS, prevID, limit, ruleID)
	ret0, _ := ret[0].([]*api.Alarm)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockAlarmerMockRecorder) List(ctx, orgID, lBoundTS, prevID, limit, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAlarmer)(nil).List), ctx, orgID, lBoundTS, prevID, limit, ruleID)
}

// Read mocks base method.
func (m *MockAlarmer) Read(ctx context.Context, alarmID, orgID, ruleID string) (*api.Alarm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, alarmID, orgID, ruleID)
	ret0, _ := ret[0].(*api.Alarm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockAlarmerMockRecorder) Read(ctx, alarmID, orgID, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAlarmer)(nil).Read), ctx, alarmID, orgID, ruleID)
}

// Update mocks base method.
func (m *MockAlarmer) Update(ctx context.Context, alarm *api.Alarm) (*api.Alarm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, alarm)
	ret0, _ := ret[0].(*api.Alarm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAlarmerMockRecorder) Update(ctx, alarm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAlarmer)(nil).Update), ctx, alarm)
}
