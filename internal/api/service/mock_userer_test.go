// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/thingspect/api/go/api"
	reflect "reflect"
)

// MockUserer is a mock of Userer interface
type MockUserer struct {
	ctrl     *gomock.Controller
	recorder *MockUsererMockRecorder
}

// MockUsererMockRecorder is the mock recorder for MockUserer
type MockUsererMockRecorder struct {
	mock *MockUserer
}

// NewMockUserer creates a new mock instance
func NewMockUserer(ctrl *gomock.Controller) *MockUserer {
	mock := &MockUserer{ctrl: ctrl}
	mock.recorder = &MockUsererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserer) EXPECT() *MockUsererMockRecorder {
	return m.recorder
}

// ReadByEmail mocks base method
func (m *MockUserer) ReadByEmail(ctx context.Context, email, orgName string) (*api.User, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByEmail", ctx, email, orgName)
	ret0, _ := ret[0].(*api.User)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadByEmail indicates an expected call of ReadByEmail
func (mr *MockUsererMockRecorder) ReadByEmail(ctx, email, orgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByEmail", reflect.TypeOf((*MockUserer)(nil).ReadByEmail), ctx, email, orgName)
}
