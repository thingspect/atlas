// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTager is a mock of Tager interface.
type MockTager struct {
	ctrl     *gomock.Controller
	recorder *MockTagerMockRecorder
}

// MockTagerMockRecorder is the mock recorder for MockTager.
type MockTagerMockRecorder struct {
	mock *MockTager
}

// NewMockTager creates a new mock instance.
func NewMockTager(ctrl *gomock.Controller) *MockTager {
	mock := &MockTager{ctrl: ctrl}
	mock.recorder = &MockTagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTager) EXPECT() *MockTagerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockTager) List(ctx context.Context, orgID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, orgID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTagerMockRecorder) List(ctx, orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTager)(nil).List), ctx, orgID)
}
