// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	api "github.com/thingspect/api/go/api"
)

// MockEventer is a mock of Eventer interface.
type MockEventer struct {
	ctrl     *gomock.Controller
	recorder *MockEventerMockRecorder
}

// MockEventerMockRecorder is the mock recorder for MockEventer.
type MockEventerMockRecorder struct {
	mock *MockEventer
}

// NewMockEventer creates a new mock instance.
func NewMockEventer(ctrl *gomock.Controller) *MockEventer {
	mock := &MockEventer{ctrl: ctrl}
	mock.recorder = &MockEventerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventer) EXPECT() *MockEventerMockRecorder {
	return m.recorder
}

// Latest mocks base method.
func (m *MockEventer) Latest(ctx context.Context, orgID, ruleID string) ([]*api.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", ctx, orgID, ruleID)
	ret0, _ := ret[0].([]*api.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest.
func (mr *MockEventerMockRecorder) Latest(ctx, orgID, ruleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockEventer)(nil).Latest), ctx, orgID, ruleID)
}

// List mocks base method.
func (m *MockEventer) List(ctx context.Context, orgID, uniqID, devID, ruleID string, end, start time.Time) ([]*api.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, orgID, uniqID, devID, ruleID, end, start)
	ret0, _ := ret[0].([]*api.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventerMockRecorder) List(ctx, orgID, uniqID, devID, ruleID, end, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventer)(nil).List), ctx, orgID, uniqID, devID, ruleID, end, start)
}
