// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/thingspect_device.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _thingspect_device_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Device) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Device with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeviceMultiError, or nil if none found.
func (m *Device) ValidateAll() error {
	return m.validate(true)
}

func (m *Device) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if l := utf8.RuneCountInString(m.GetUniqId()); l < 5 || l > 40 {
		err := DeviceValidationError{
			field:  "UniqId",
			reason: "value length must be between 5 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 80 {
		err := DeviceValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Device_Status_InLookup[m.GetStatus()]; !ok {
		err := DeviceValidationError{
			field:  "Status",
			reason: "value must be in list [ACTIVE DISABLED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToken() != "" {

		if err := m._validateUuid(m.GetToken()); err != nil {
			err = DeviceValidationError{
				field:  "Token",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Decoder

	_Device_Tags_Unique := make(map[string]struct{}, len(m.GetTags()))

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if _, exists := _Device_Tags_Unique[item]; exists {
			err := DeviceValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Device_Tags_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) > 255 {
			err := DeviceValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceMultiError(errors)
	}

	return nil
}

func (m *Device) _validateUuid(uuid string) error {
	if matched := _thingspect_device_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeviceMultiError is an error wrapping multiple validation errors returned by
// Device.ValidateAll() if the designated constraints aren't met.
type DeviceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceMultiError) AllErrors() []error { return m }

// DeviceValidationError is the validation error returned by Device.Validate if
// the designated constraints aren't met.
type DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceValidationError) ErrorName() string { return "DeviceValidationError" }

// Error satisfies the builtin error interface
func (e DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDevice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceValidationError{}

var _Device_Status_InLookup = map[Status]struct{}{
	3: {},
	6: {},
}

// Validate checks the field values on CreateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceRequestMultiError, or nil if none found.
func (m *CreateDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDevice() == nil {
		err := CreateDeviceRequestValidationError{
			field:  "Device",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeviceRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeviceRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeviceRequestValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeviceRequestMultiError(errors)
	}

	return nil
}

// CreateDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceRequestMultiError) AllErrors() []error { return m }

// CreateDeviceRequestValidationError is the validation error returned by
// CreateDeviceRequest.Validate if the designated constraints aren't met.
type CreateDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceRequestValidationError) ErrorName() string {
	return "CreateDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceRequestValidationError{}

// Validate checks the field values on CreateDeviceLoRaWANRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceLoRaWANRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeviceLoRaWANRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeviceLoRaWANRequestMultiError, or nil if none found.
func (m *CreateDeviceLoRaWANRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceLoRaWANRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = CreateDeviceLoRaWANRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofTypeOneofPresent := false
	switch v := m.TypeOneof.(type) {
	case *CreateDeviceLoRaWANRequest_GatewayLorawanType:
		if v == nil {
			err := CreateDeviceLoRaWANRequestValidationError{
				field:  "TypeOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypeOneofPresent = true

		if all {
			switch v := interface{}(m.GetGatewayLorawanType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDeviceLoRaWANRequestValidationError{
						field:  "GatewayLorawanType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDeviceLoRaWANRequestValidationError{
						field:  "GatewayLorawanType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGatewayLorawanType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDeviceLoRaWANRequestValidationError{
					field:  "GatewayLorawanType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateDeviceLoRaWANRequest_DeviceLorawanType:
		if v == nil {
			err := CreateDeviceLoRaWANRequestValidationError{
				field:  "TypeOneof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypeOneofPresent = true

		if all {
			switch v := interface{}(m.GetDeviceLorawanType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDeviceLoRaWANRequestValidationError{
						field:  "DeviceLorawanType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDeviceLoRaWANRequestValidationError{
						field:  "DeviceLorawanType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeviceLorawanType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDeviceLoRaWANRequestValidationError{
					field:  "DeviceLorawanType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypeOneofPresent {
		err := CreateDeviceLoRaWANRequestValidationError{
			field:  "TypeOneof",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateDeviceLoRaWANRequestMultiError(errors)
	}

	return nil
}

func (m *CreateDeviceLoRaWANRequest) _validateUuid(uuid string) error {
	if matched := _thingspect_device_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateDeviceLoRaWANRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDeviceLoRaWANRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateDeviceLoRaWANRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceLoRaWANRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceLoRaWANRequestMultiError) AllErrors() []error { return m }

// CreateDeviceLoRaWANRequestValidationError is the validation error returned
// by CreateDeviceLoRaWANRequest.Validate if the designated constraints aren't met.
type CreateDeviceLoRaWANRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceLoRaWANRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceLoRaWANRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceLoRaWANRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceLoRaWANRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceLoRaWANRequestValidationError) ErrorName() string {
	return "CreateDeviceLoRaWANRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceLoRaWANRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceLoRaWANRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceLoRaWANRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceLoRaWANRequestValidationError{}

// Validate checks the field values on GetDeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceRequestMultiError, or nil if none found.
func (m *GetDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetDeviceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeviceRequestMultiError(errors)
	}

	return nil
}

func (m *GetDeviceRequest) _validateUuid(uuid string) error {
	if matched := _thingspect_device_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetDeviceRequestMultiError is an error wrapping multiple validation errors
// returned by GetDeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceRequestMultiError) AllErrors() []error { return m }

// GetDeviceRequestValidationError is the validation error returned by
// GetDeviceRequest.Validate if the designated constraints aren't met.
type GetDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceRequestValidationError) ErrorName() string { return "GetDeviceRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceRequestValidationError{}

// Validate checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceRequestMultiError, or nil if none found.
func (m *UpdateDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDevice() == nil {
		err := UpdateDeviceRequestValidationError{
			field:  "Device",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceRequestValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDeviceRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDeviceRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeviceRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDeviceRequestMultiError(errors)
	}

	return nil
}

// UpdateDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceRequestMultiError) AllErrors() []error { return m }

// UpdateDeviceRequestValidationError is the validation error returned by
// UpdateDeviceRequest.Validate if the designated constraints aren't met.
type UpdateDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceRequestValidationError) ErrorName() string {
	return "UpdateDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceRequestValidationError{}

// Validate checks the field values on DeleteDeviceLoRaWANRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceLoRaWANRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceLoRaWANRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceLoRaWANRequestMultiError, or nil if none found.
func (m *DeleteDeviceLoRaWANRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceLoRaWANRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteDeviceLoRaWANRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDeviceLoRaWANRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteDeviceLoRaWANRequest) _validateUuid(uuid string) error {
	if matched := _thingspect_device_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteDeviceLoRaWANRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteDeviceLoRaWANRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteDeviceLoRaWANRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceLoRaWANRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceLoRaWANRequestMultiError) AllErrors() []error { return m }

// DeleteDeviceLoRaWANRequestValidationError is the validation error returned
// by DeleteDeviceLoRaWANRequest.Validate if the designated constraints aren't met.
type DeleteDeviceLoRaWANRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceLoRaWANRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceLoRaWANRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceLoRaWANRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceLoRaWANRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceLoRaWANRequestValidationError) ErrorName() string {
	return "DeleteDeviceLoRaWANRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceLoRaWANRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceLoRaWANRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceLoRaWANRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceLoRaWANRequestValidationError{}

// Validate checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeviceRequestMultiError, or nil if none found.
func (m *DeleteDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteDeviceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDeviceRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteDeviceRequest) _validateUuid(uuid string) error {
	if matched := _thingspect_device_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeviceRequestMultiError) AllErrors() []error { return m }

// DeleteDeviceRequestValidationError is the validation error returned by
// DeleteDeviceRequest.Validate if the designated constraints aren't met.
type DeleteDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeviceRequestValidationError) ErrorName() string {
	return "DeleteDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeviceRequestValidationError{}

// Validate checks the field values on ListDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesRequestMultiError, or nil if none found.
func (m *ListDevicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() > 250 {
		err := ListDevicesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 250",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if utf8.RuneCountInString(m.GetTag()) > 255 {
		err := ListDevicesRequestValidationError{
			field:  "Tag",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDevicesRequestMultiError(errors)
	}

	return nil
}

// ListDevicesRequestMultiError is an error wrapping multiple validation errors
// returned by ListDevicesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDevicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesRequestMultiError) AllErrors() []error { return m }

// ListDevicesRequestValidationError is the validation error returned by
// ListDevicesRequest.Validate if the designated constraints aren't met.
type ListDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesRequestValidationError) ErrorName() string {
	return "ListDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesRequestValidationError{}

// Validate checks the field values on ListDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDevicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDevicesResponseMultiError, or nil if none found.
func (m *ListDevicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDevicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDevicesResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDevicesResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListDevicesResponseMultiError(errors)
	}

	return nil
}

// ListDevicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListDevicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDevicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDevicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDevicesResponseMultiError) AllErrors() []error { return m }

// ListDevicesResponseValidationError is the validation error returned by
// ListDevicesResponse.Validate if the designated constraints aren't met.
type ListDevicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDevicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDevicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDevicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDevicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDevicesResponseValidationError) ErrorName() string {
	return "ListDevicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDevicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDevicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDevicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDevicesResponseValidationError{}

// Validate checks the field values on
// CreateDeviceLoRaWANRequest_GatewayLoRaWANType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceLoRaWANRequest_GatewayLoRaWANType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDeviceLoRaWANRequest_GatewayLoRaWANType with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeMultiError, or nil if none found.
func (m *CreateDeviceLoRaWANRequest_GatewayLoRaWANType) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceLoRaWANRequest_GatewayLoRaWANType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeMultiError(errors)
	}

	return nil
}

// CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeMultiError is an error wrapping
// multiple validation errors returned by
// CreateDeviceLoRaWANRequest_GatewayLoRaWANType.ValidateAll() if the
// designated constraints aren't met.
type CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeMultiError) AllErrors() []error { return m }

// CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError is the
// validation error returned by
// CreateDeviceLoRaWANRequest_GatewayLoRaWANType.Validate if the designated
// constraints aren't met.
type CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError) ErrorName() string {
	return "CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceLoRaWANRequest_GatewayLoRaWANType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceLoRaWANRequest_GatewayLoRaWANTypeValidationError{}

// Validate checks the field values on
// CreateDeviceLoRaWANRequest_DeviceLoRaWANType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDeviceLoRaWANRequest_DeviceLoRaWANType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDeviceLoRaWANRequest_DeviceLoRaWANType with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeMultiError, or nil if none found.
func (m *CreateDeviceLoRaWANRequest_DeviceLoRaWANType) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeviceLoRaWANRequest_DeviceLoRaWANType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppKey()) != 32 {
		err := CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError{
			field:  "AppKey",
			reason: "value length must be 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeMultiError(errors)
	}

	return nil
}

// CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeMultiError is an error wrapping
// multiple validation errors returned by
// CreateDeviceLoRaWANRequest_DeviceLoRaWANType.ValidateAll() if the
// designated constraints aren't met.
type CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeMultiError) AllErrors() []error { return m }

// CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError is the
// validation error returned by
// CreateDeviceLoRaWANRequest_DeviceLoRaWANType.Validate if the designated
// constraints aren't met.
type CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError) ErrorName() string {
	return "CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeviceLoRaWANRequest_DeviceLoRaWANType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeviceLoRaWANRequest_DeviceLoRaWANTypeValidationError{}
