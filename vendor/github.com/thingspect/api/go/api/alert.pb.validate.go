// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/alert.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _alert_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Alert with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// AlertMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Alert) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgId

	// no validation rules for UniqId

	// no validation rules for AlarmId

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for Error

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = AlertValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for TraceId

	if len(errors) > 0 {
		return AlertMultiError(errors)
	}
	return nil
}

// AlertMultiError is an error wrapping multiple validation errors returned by
// Alert.Validate(true) if the designated constraints aren't met.
type AlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertMultiError) AllErrors() []error { return m }

// AlertValidationError is the validation error returned by Alert.Validate if
// the designated constraints aren't met.
type AlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertValidationError) ErrorName() string { return "AlertValidationError" }

// Error satisfies the builtin error interface
func (e AlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertValidationError{}

// Validate checks the field values on ListAlertsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in ListAlertsRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *ListAlertsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAlarmId() != "" {

		if err := m._validateUuid(m.GetAlarmId()); err != nil {
			err = ListAlertsRequestValidationError{
				field:  "AlarmId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetUserId() != "" {

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = ListAlertsRequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ListAlertsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ListAlertsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	switch m.IdOneof.(type) {

	case *ListAlertsRequest_UniqId:
		// no validation rules for UniqId

	case *ListAlertsRequest_DeviceId:

		if m.GetDeviceId() != "" {

			if err := m._validateUuid(m.GetDeviceId()); err != nil {
				err = ListAlertsRequestValidationError{
					field:  "DeviceId",
					reason: "value must be a valid UUID",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if len(errors) > 0 {
		return ListAlertsRequestMultiError(errors)
	}
	return nil
}

func (m *ListAlertsRequest) _validateUuid(uuid string) error {
	if matched := _alert_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListAlertsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAlertsRequest.Validate(true) if the designated constraints
// aren't met.
type ListAlertsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertsRequestMultiError) AllErrors() []error { return m }

// ListAlertsRequestValidationError is the validation error returned by
// ListAlertsRequest.Validate if the designated constraints aren't met.
type ListAlertsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertsRequestValidationError) ErrorName() string {
	return "ListAlertsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertsRequestValidationError{}

// Validate checks the field values on ListAlertsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ListAlertsResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ListAlertsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ListAlertsResponseValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return ListAlertsResponseMultiError(errors)
	}
	return nil
}

// ListAlertsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAlertsResponse.Validate(true) if the designated constraints
// aren't met.
type ListAlertsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlertsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlertsResponseMultiError) AllErrors() []error { return m }

// ListAlertsResponseValidationError is the validation error returned by
// ListAlertsResponse.Validate if the designated constraints aren't met.
type ListAlertsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlertsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlertsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlertsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlertsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlertsResponseValidationError) ErrorName() string {
	return "ListAlertsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlertsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlertsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlertsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlertsResponseValidationError{}
