// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/datapoint.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _datapoint_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PublishDataPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PublishDataPointRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPoints()) < 1 {
		return PublishDataPointRequestValidationError{
			field:  "Points",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishDataPointRequestValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PublishDataPointRequestValidationError is the validation error returned by
// PublishDataPointRequest.Validate if the designated constraints aren't met.
type PublishDataPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishDataPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishDataPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishDataPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishDataPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishDataPointRequestValidationError) ErrorName() string {
	return "PublishDataPointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishDataPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishDataPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishDataPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishDataPointRequestValidationError{}

// Validate checks the field values on LatestDataPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LatestDataPointRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.IdOneof.(type) {

	case *LatestDataPointRequest_UniqId:
		// no validation rules for UniqId

	case *LatestDataPointRequest_DevId:
		// no validation rules for DevId

	default:
		return LatestDataPointRequestValidationError{
			field:  "IdOneof",
			reason: "value is required",
		}

	}

	return nil
}

// LatestDataPointRequestValidationError is the validation error returned by
// LatestDataPointRequest.Validate if the designated constraints aren't met.
type LatestDataPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatestDataPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatestDataPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatestDataPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatestDataPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatestDataPointRequestValidationError) ErrorName() string {
	return "LatestDataPointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LatestDataPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatestDataPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatestDataPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatestDataPointRequestValidationError{}

// Validate checks the field values on LatestDataPointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LatestDataPointResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LatestDataPointResponseValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LatestDataPointResponseValidationError is the validation error returned by
// LatestDataPointResponse.Validate if the designated constraints aren't met.
type LatestDataPointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatestDataPointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatestDataPointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatestDataPointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatestDataPointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatestDataPointResponseValidationError) ErrorName() string {
	return "LatestDataPointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LatestDataPointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatestDataPointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatestDataPointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatestDataPointResponseValidationError{}
