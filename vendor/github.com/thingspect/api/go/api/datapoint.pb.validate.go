// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/datapoint.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _datapoint_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PublishDataPointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PublishDataPointsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPoints()) < 1 {
		return PublishDataPointsRequestValidationError{
			field:  "Points",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishDataPointsRequestValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PublishDataPointsRequestValidationError is the validation error returned by
// PublishDataPointsRequest.Validate if the designated constraints aren't met.
type PublishDataPointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishDataPointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishDataPointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishDataPointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishDataPointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishDataPointsRequestValidationError) ErrorName() string {
	return "PublishDataPointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishDataPointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishDataPointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishDataPointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishDataPointsRequestValidationError{}

// Validate checks the field values on ListDataPointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDataPointsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetAttr()); l < 0 || l > 40 {
		return ListDataPointsRequestValidationError{
			field:  "Attr",
			reason: "value length must be between 0 and 40 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDataPointsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDataPointsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.IdOneof.(type) {

	case *ListDataPointsRequest_UniqId:
		// no validation rules for UniqId

	case *ListDataPointsRequest_DevId:
		// no validation rules for DevId

	default:
		return ListDataPointsRequestValidationError{
			field:  "IdOneof",
			reason: "value is required",
		}

	}

	return nil
}

// ListDataPointsRequestValidationError is the validation error returned by
// ListDataPointsRequest.Validate if the designated constraints aren't met.
type ListDataPointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataPointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataPointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataPointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataPointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataPointsRequestValidationError) ErrorName() string {
	return "ListDataPointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDataPointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataPointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataPointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataPointsRequestValidationError{}

// Validate checks the field values on ListDataPointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDataPointsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDataPointsResponseValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDataPointsResponseValidationError is the validation error returned by
// ListDataPointsResponse.Validate if the designated constraints aren't met.
type ListDataPointsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDataPointsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDataPointsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDataPointsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDataPointsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDataPointsResponseValidationError) ErrorName() string {
	return "ListDataPointsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDataPointsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDataPointsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDataPointsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDataPointsResponseValidationError{}

// Validate checks the field values on LatestDataPointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LatestDataPointsRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.IdOneof.(type) {

	case *LatestDataPointsRequest_UniqId:
		// no validation rules for UniqId

	case *LatestDataPointsRequest_DevId:
		// no validation rules for DevId

	default:
		return LatestDataPointsRequestValidationError{
			field:  "IdOneof",
			reason: "value is required",
		}

	}

	return nil
}

// LatestDataPointsRequestValidationError is the validation error returned by
// LatestDataPointsRequest.Validate if the designated constraints aren't met.
type LatestDataPointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatestDataPointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatestDataPointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatestDataPointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatestDataPointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatestDataPointsRequestValidationError) ErrorName() string {
	return "LatestDataPointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LatestDataPointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatestDataPointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatestDataPointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatestDataPointsRequestValidationError{}

// Validate checks the field values on LatestDataPointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LatestDataPointsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LatestDataPointsResponseValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LatestDataPointsResponseValidationError is the validation error returned by
// LatestDataPointsResponse.Validate if the designated constraints aren't met.
type LatestDataPointsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatestDataPointsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatestDataPointsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatestDataPointsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatestDataPointsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatestDataPointsResponseValidationError) ErrorName() string {
	return "LatestDataPointsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LatestDataPointsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatestDataPointsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatestDataPointsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatestDataPointsResponseValidationError{}
