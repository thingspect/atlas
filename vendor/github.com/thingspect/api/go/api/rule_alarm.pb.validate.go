// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rule_alarm.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _rule_alarm_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 80 {
		err := RuleValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Rule_Status_InLookup[m.GetStatus()]; !ok {
		err := RuleValidationError{
			field:  "Status",
			reason: "value must be in list [3 6]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeviceTag()) > 255 {
		err := RuleValidationError{
			field:  "DeviceTag",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAttr()) > 40 {
		err := RuleValidationError{
			field:  "Attr",
			reason: "value length must be at most 40 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpr()) > 1024 {
		err := RuleValidationError{
			field:  "Expr",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}

	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

var _Rule_Status_InLookup = map[Status]struct{}{
	3: {},
	6: {},
}

// Validate checks the field values on CreateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRuleRequestMultiError, or nil if none found.
func (m *CreateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRule() == nil {
		err := CreateRuleRequestValidationError{
			field:  "Rule",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRuleRequestMultiError(errors)
	}

	return nil
}

// CreateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRuleRequestMultiError) AllErrors() []error { return m }

// CreateRuleRequestValidationError is the validation error returned by
// CreateRuleRequest.Validate if the designated constraints aren't met.
type CreateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleRequestValidationError) ErrorName() string {
	return "CreateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleRequestValidationError{}

// Validate checks the field values on GetRuleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRuleRequestMultiError,
// or nil if none found.
func (m *GetRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetRuleRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRuleRequestMultiError(errors)
	}

	return nil
}

func (m *GetRuleRequest) _validateUuid(uuid string) error {
	if matched := _rule_alarm_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetRuleRequestMultiError is an error wrapping multiple validation errors
// returned by GetRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRuleRequestMultiError) AllErrors() []error { return m }

// GetRuleRequestValidationError is the validation error returned by
// GetRuleRequest.Validate if the designated constraints aren't met.
type GetRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleRequestValidationError) ErrorName() string { return "GetRuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleRequestValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRuleRequestMultiError, or nil if none found.
func (m *UpdateRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRule() == nil {
		err := UpdateRuleRequestValidationError{
			field:  "Rule",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRuleRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateRuleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRuleRequestMultiError) AllErrors() []error { return m }

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

// Validate checks the field values on DeleteRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRuleRequestMultiError, or nil if none found.
func (m *DeleteRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteRuleRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRuleRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteRuleRequest) _validateUuid(uuid string) error {
	if matched := _rule_alarm_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteRuleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRuleRequestMultiError) AllErrors() []error { return m }

// DeleteRuleRequestValidationError is the validation error returned by
// DeleteRuleRequest.Validate if the designated constraints aren't met.
type DeleteRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleRequestValidationError) ErrorName() string {
	return "DeleteRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleRequestValidationError{}

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesRequestMultiError, or nil if none found.
func (m *ListRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() > 250 {
		err := ListRulesRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 250",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListRulesRequestMultiError(errors)
	}

	return nil
}

// ListRulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesRequestMultiError) AllErrors() []error { return m }

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRulesResponseMultiError, or nil if none found.
func (m *ListRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListRulesResponseMultiError(errors)
	}

	return nil
}

// ListRulesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRulesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRulesResponseMultiError) AllErrors() []error { return m }

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on TestRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestRuleRequestMultiError, or nil if none found.
func (m *TestRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPoint() == nil {
		err := TestRuleRequestValidationError{
			field:  "Point",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestRuleRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestRuleRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestRuleRequestValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRule() == nil {
		err := TestRuleRequestValidationError{
			field:  "Rule",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestRuleRequestMultiError(errors)
	}

	return nil
}

// TestRuleRequestMultiError is an error wrapping multiple validation errors
// returned by TestRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type TestRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestRuleRequestMultiError) AllErrors() []error { return m }

// TestRuleRequestValidationError is the validation error returned by
// TestRuleRequest.Validate if the designated constraints aren't met.
type TestRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestRuleRequestValidationError) ErrorName() string { return "TestRuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e TestRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestRuleRequestValidationError{}

// Validate checks the field values on TestRuleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestRuleResponseMultiError, or nil if none found.
func (m *TestRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return TestRuleResponseMultiError(errors)
	}

	return nil
}

// TestRuleResponseMultiError is an error wrapping multiple validation errors
// returned by TestRuleResponse.ValidateAll() if the designated constraints
// aren't met.
type TestRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestRuleResponseMultiError) AllErrors() []error { return m }

// TestRuleResponseValidationError is the validation error returned by
// TestRuleResponse.Validate if the designated constraints aren't met.
type TestRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestRuleResponseValidationError) ErrorName() string { return "TestRuleResponseValidationError" }

// Error satisfies the builtin error interface
func (e TestRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestRuleResponseValidationError{}

// Validate checks the field values on Alarm with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Alarm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Alarm with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AlarmMultiError, or nil if none found.
func (m *Alarm) ValidateAll() error {
	return m.validate(true)
}

func (m *Alarm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for RuleId

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 80 {
		err := AlarmValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 80 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Alarm_Status_InLookup[m.GetStatus()]; !ok {
		err := AlarmValidationError{
			field:  "Status",
			reason: "value must be in list [3 6]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Alarm_Type_InLookup[m.GetType()]; !ok {
		err := AlarmValidationError{
			field:  "Type",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUserTags()) < 1 {
		err := AlarmValidationError{
			field:  "UserTags",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_Alarm_UserTags_Unique := make(map[string]struct{}, len(m.GetUserTags()))

	for idx, item := range m.GetUserTags() {
		_, _ = idx, item

		if _, exists := _Alarm_UserTags_Unique[item]; exists {
			err := AlarmValidationError{
				field:  fmt.Sprintf("UserTags[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Alarm_UserTags_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) > 255 {
			err := AlarmValidationError{
				field:  fmt.Sprintf("UserTags[%v]", idx),
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetSubjectTemplate()) > 1024 {
		err := AlarmValidationError{
			field:  "SubjectTemplate",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBodyTemplate()) > 4096 {
		err := AlarmValidationError{
			field:  "BodyTemplate",
			reason: "value length must be at most 4096 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetRepeatInterval(); val < 1 || val > 20160 {
		err := AlarmValidationError{
			field:  "RepeatInterval",
			reason: "value must be inside range [1, 20160]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlarmValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlarmValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlarmValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AlarmValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AlarmValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AlarmValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AlarmMultiError(errors)
	}

	return nil
}

// AlarmMultiError is an error wrapping multiple validation errors returned by
// Alarm.ValidateAll() if the designated constraints aren't met.
type AlarmMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlarmMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlarmMultiError) AllErrors() []error { return m }

// AlarmValidationError is the validation error returned by Alarm.Validate if
// the designated constraints aren't met.
type AlarmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlarmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlarmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlarmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlarmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlarmValidationError) ErrorName() string { return "AlarmValidationError" }

// Error satisfies the builtin error interface
func (e AlarmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlarm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlarmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlarmValidationError{}

var _Alarm_Status_InLookup = map[Status]struct{}{
	3: {},
	6: {},
}

var _Alarm_Type_InLookup = map[AlarmType]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on CreateAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAlarmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAlarmRequestMultiError, or nil if none found.
func (m *CreateAlarmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAlarmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAlarm() == nil {
		err := CreateAlarmRequestValidationError{
			field:  "Alarm",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAlarm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAlarmRequestValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAlarmRequestValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAlarmRequestValidationError{
				field:  "Alarm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAlarmRequestMultiError(errors)
	}

	return nil
}

// CreateAlarmRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAlarmRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAlarmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAlarmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAlarmRequestMultiError) AllErrors() []error { return m }

// CreateAlarmRequestValidationError is the validation error returned by
// CreateAlarmRequest.Validate if the designated constraints aren't met.
type CreateAlarmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAlarmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAlarmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAlarmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAlarmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAlarmRequestValidationError) ErrorName() string {
	return "CreateAlarmRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAlarmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAlarmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAlarmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAlarmRequestValidationError{}

// Validate checks the field values on GetAlarmRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAlarmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAlarmRequestMultiError, or nil if none found.
func (m *GetAlarmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAlarmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetAlarmRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetRuleId()); err != nil {
		err = GetAlarmRequestValidationError{
			field:  "RuleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAlarmRequestMultiError(errors)
	}

	return nil
}

func (m *GetAlarmRequest) _validateUuid(uuid string) error {
	if matched := _rule_alarm_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAlarmRequestMultiError is an error wrapping multiple validation errors
// returned by GetAlarmRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAlarmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAlarmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAlarmRequestMultiError) AllErrors() []error { return m }

// GetAlarmRequestValidationError is the validation error returned by
// GetAlarmRequest.Validate if the designated constraints aren't met.
type GetAlarmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAlarmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAlarmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAlarmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAlarmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAlarmRequestValidationError) ErrorName() string { return "GetAlarmRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAlarmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAlarmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAlarmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAlarmRequestValidationError{}

// Validate checks the field values on UpdateAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAlarmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAlarmRequestMultiError, or nil if none found.
func (m *UpdateAlarmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAlarmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAlarm() == nil {
		err := UpdateAlarmRequestValidationError{
			field:  "Alarm",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAlarm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlarmRequestValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlarmRequestValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlarmRequestValidationError{
				field:  "Alarm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAlarmRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAlarmRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAlarmRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAlarmRequestMultiError(errors)
	}

	return nil
}

// UpdateAlarmRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAlarmRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAlarmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAlarmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAlarmRequestMultiError) AllErrors() []error { return m }

// UpdateAlarmRequestValidationError is the validation error returned by
// UpdateAlarmRequest.Validate if the designated constraints aren't met.
type UpdateAlarmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAlarmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAlarmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAlarmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAlarmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAlarmRequestValidationError) ErrorName() string {
	return "UpdateAlarmRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAlarmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAlarmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAlarmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAlarmRequestValidationError{}

// Validate checks the field values on DeleteAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAlarmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAlarmRequestMultiError, or nil if none found.
func (m *DeleteAlarmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAlarmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteAlarmRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetRuleId()); err != nil {
		err = DeleteAlarmRequestValidationError{
			field:  "RuleId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAlarmRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteAlarmRequest) _validateUuid(uuid string) error {
	if matched := _rule_alarm_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteAlarmRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAlarmRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAlarmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAlarmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAlarmRequestMultiError) AllErrors() []error { return m }

// DeleteAlarmRequestValidationError is the validation error returned by
// DeleteAlarmRequest.Validate if the designated constraints aren't met.
type DeleteAlarmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAlarmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAlarmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAlarmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAlarmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAlarmRequestValidationError) ErrorName() string {
	return "DeleteAlarmRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAlarmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAlarmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAlarmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAlarmRequestValidationError{}

// Validate checks the field values on ListAlarmsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAlarmsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlarmsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlarmsRequestMultiError, or nil if none found.
func (m *ListAlarmsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlarmsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() > 250 {
		err := ListAlarmsRequestValidationError{
			field:  "PageSize",
			reason: "value must be less than or equal to 250",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if m.GetRuleId() != "" {

		if err := m._validateUuid(m.GetRuleId()); err != nil {
			err = ListAlarmsRequestValidationError{
				field:  "RuleId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListAlarmsRequestMultiError(errors)
	}

	return nil
}

func (m *ListAlarmsRequest) _validateUuid(uuid string) error {
	if matched := _rule_alarm_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListAlarmsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAlarmsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAlarmsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlarmsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlarmsRequestMultiError) AllErrors() []error { return m }

// ListAlarmsRequestValidationError is the validation error returned by
// ListAlarmsRequest.Validate if the designated constraints aren't met.
type ListAlarmsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlarmsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlarmsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlarmsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlarmsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlarmsRequestValidationError) ErrorName() string {
	return "ListAlarmsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlarmsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlarmsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlarmsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlarmsRequestValidationError{}

// Validate checks the field values on ListAlarmsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAlarmsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAlarmsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAlarmsResponseMultiError, or nil if none found.
func (m *ListAlarmsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAlarmsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlarms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAlarmsResponseValidationError{
						field:  fmt.Sprintf("Alarms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAlarmsResponseValidationError{
						field:  fmt.Sprintf("Alarms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAlarmsResponseValidationError{
					field:  fmt.Sprintf("Alarms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListAlarmsResponseMultiError(errors)
	}

	return nil
}

// ListAlarmsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAlarmsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAlarmsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAlarmsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAlarmsResponseMultiError) AllErrors() []error { return m }

// ListAlarmsResponseValidationError is the validation error returned by
// ListAlarmsResponse.Validate if the designated constraints aren't met.
type ListAlarmsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAlarmsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAlarmsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAlarmsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAlarmsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAlarmsResponseValidationError) ErrorName() string {
	return "ListAlarmsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAlarmsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAlarmsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAlarmsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAlarmsResponseValidationError{}

// Validate checks the field values on TestAlarmRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestAlarmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestAlarmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestAlarmRequestMultiError, or nil if none found.
func (m *TestAlarmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestAlarmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPoint() == nil {
		err := TestAlarmRequestValidationError{
			field:  "Point",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestAlarmRequestValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRule() == nil {
		err := TestAlarmRequestValidationError{
			field:  "Rule",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestAlarmRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDevice() == nil {
		err := TestAlarmRequestValidationError{
			field:  "Device",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestAlarmRequestValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAlarm() == nil {
		err := TestAlarmRequestValidationError{
			field:  "Alarm",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAlarm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestAlarmRequestValidationError{
					field:  "Alarm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlarm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestAlarmRequestValidationError{
				field:  "Alarm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestAlarmRequestMultiError(errors)
	}

	return nil
}

// TestAlarmRequestMultiError is an error wrapping multiple validation errors
// returned by TestAlarmRequest.ValidateAll() if the designated constraints
// aren't met.
type TestAlarmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestAlarmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestAlarmRequestMultiError) AllErrors() []error { return m }

// TestAlarmRequestValidationError is the validation error returned by
// TestAlarmRequest.Validate if the designated constraints aren't met.
type TestAlarmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestAlarmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestAlarmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestAlarmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestAlarmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestAlarmRequestValidationError) ErrorName() string { return "TestAlarmRequestValidationError" }

// Error satisfies the builtin error interface
func (e TestAlarmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestAlarmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestAlarmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestAlarmRequestValidationError{}

// Validate checks the field values on TestAlarmResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestAlarmResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestAlarmResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestAlarmResponseMultiError, or nil if none found.
func (m *TestAlarmResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TestAlarmResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return TestAlarmResponseMultiError(errors)
	}

	return nil
}

// TestAlarmResponseMultiError is an error wrapping multiple validation errors
// returned by TestAlarmResponse.ValidateAll() if the designated constraints
// aren't met.
type TestAlarmResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestAlarmResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestAlarmResponseMultiError) AllErrors() []error { return m }

// TestAlarmResponseValidationError is the validation error returned by
// TestAlarmResponse.Validate if the designated constraints aren't met.
type TestAlarmResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestAlarmResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestAlarmResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestAlarmResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestAlarmResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestAlarmResponseValidationError) ErrorName() string {
	return "TestAlarmResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TestAlarmResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestAlarmResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestAlarmResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestAlarmResponseValidationError{}
