// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/rule.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _rule_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for OrgId

	if l := utf8.RuneCountInString(m.GetName()); l < 5 || l > 80 {
		return RuleValidationError{
			field:  "Name",
			reason: "value length must be between 5 and 80 runes, inclusive",
		}
	}

	if _, ok := _Rule_Status_InLookup[m.GetStatus()]; !ok {
		return RuleValidationError{
			field:  "Status",
			reason: "value must be in list [3 6]",
		}
	}

	if utf8.RuneCountInString(m.GetTag()) > 255 {
		return RuleValidationError{
			field:  "Tag",
			reason: "value length must be at most 255 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAttr()) > 40 {
		return RuleValidationError{
			field:  "Attr",
			reason: "value length must be at most 40 runes",
		}
	}

	if utf8.RuneCountInString(m.GetExpr()) > 1024 {
		return RuleValidationError{
			field:  "Expr",
			reason: "value length must be at most 1024 runes",
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

var _Rule_Status_InLookup = map[Status]struct{}{
	3: {},
	6: {},
}

// Validate checks the field values on CreateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRule() == nil {
		return CreateRuleRequestValidationError{
			field:  "Rule",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRuleRequestValidationError is the validation error returned by
// CreateRuleRequest.Validate if the designated constraints aren't met.
type CreateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRuleRequestValidationError) ErrorName() string {
	return "CreateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRuleRequestValidationError{}

// Validate checks the field values on GetRuleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return GetRuleRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *GetRuleRequest) _validateUuid(uuid string) error {
	if matched := _rule_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetRuleRequestValidationError is the validation error returned by
// GetRuleRequest.Validate if the designated constraints aren't met.
type GetRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRuleRequestValidationError) ErrorName() string { return "GetRuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRuleRequestValidationError{}

// Validate checks the field values on UpdateRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRule() == nil {
		return UpdateRuleRequestValidationError{
			field:  "Rule",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRuleRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRuleRequestValidationError is the validation error returned by
// UpdateRuleRequest.Validate if the designated constraints aren't met.
type UpdateRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRuleRequestValidationError) ErrorName() string {
	return "UpdateRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRuleRequestValidationError{}

// Validate checks the field values on DeleteRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return DeleteRuleRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	return nil
}

func (m *DeleteRuleRequest) _validateUuid(uuid string) error {
	if matched := _rule_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteRuleRequestValidationError is the validation error returned by
// DeleteRuleRequest.Validate if the designated constraints aren't met.
type DeleteRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRuleRequestValidationError) ErrorName() string {
	return "DeleteRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRuleRequestValidationError{}

// Validate checks the field values on ListRulesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetPageSize(); val < 0 || val > 250 {
		return ListRulesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 250]",
		}
	}

	// no validation rules for PageToken

	return nil
}

// ListRulesRequestValidationError is the validation error returned by
// ListRulesRequest.Validate if the designated constraints aren't met.
type ListRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesRequestValidationError) ErrorName() string { return "ListRulesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesRequestValidationError{}

// Validate checks the field values on ListRulesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRulesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	return nil
}

// ListRulesResponseValidationError is the validation error returned by
// ListRulesResponse.Validate if the designated constraints aren't met.
type ListRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRulesResponseValidationError) ErrorName() string {
	return "ListRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRulesResponseValidationError{}

// Validate checks the field values on TestRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TestRuleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPoint() == nil {
		return TestRuleRequestValidationError{
			field:  "Point",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestRuleRequestValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRule() == nil {
		return TestRuleRequestValidationError{
			field:  "Rule",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TestRuleRequestValidationError is the validation error returned by
// TestRuleRequest.Validate if the designated constraints aren't met.
type TestRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestRuleRequestValidationError) ErrorName() string { return "TestRuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e TestRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestRuleRequestValidationError{}

// Validate checks the field values on TestRuleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TestRuleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// TestRuleResponseValidationError is the validation error returned by
// TestRuleResponse.Validate if the designated constraints aren't met.
type TestRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestRuleResponseValidationError) ErrorName() string { return "TestRuleResponseValidationError" }

// Error satisfies the builtin error interface
func (e TestRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestRuleResponseValidationError{}
